@page "/scope"
@using Microsoft.AspNetCore.Components.Rendering
@using Microsoft.Extensions.Logging
@using SharedLibrary.Features.Scopes.Services

<MudText Typo="Typo.h2">Scope Example</MudText>
<MudText Typo="Typo.body1">Singleton #@Singleton.Number</MudText>
<MudText Typo="Typo.body1">Scoped #@Scoped.Number</MudText>
<MudText Typo="Typo.body1">Transient #@Transient.Number</MudText>

@inject ILogger<Scope> Logger
@inject SingletonService Singleton
@inject ScopedService Scoped
@inject TransientService Transient

@implements IDisposable

@code {
    private int _count;

    private void Log(string message)
    {
        if (Logger == null)
        {
            Console.WriteLine(message);
        }
        else
        {
            Logger.LogInformation(message);
        }
    }

    /* Implicitly implemented / generated by compiler when compiling the Razor to Component Code
    protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
        Log(nameof(BuildRenderTree));
        base.BuildRenderTree(builder);
    }
    */

    public override Task SetParametersAsync(ParameterView parameters)
    {
        Log(nameof(SetParametersAsync));
        return base.SetParametersAsync(parameters);
    }

    protected override void OnInitialized()
    {
        Log(nameof(OnInitialized));
        base.OnInitialized();
    }

    protected override Task OnInitializedAsync()
    {
        Log(nameof(OnInitializedAsync));
        return base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Log(nameof(OnParametersSet));
        base.OnParametersSet();
    }

    protected override Task OnParametersSetAsync()
    {
        Log(nameof(OnParametersSetAsync));
        return base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Log(nameof(OnAfterRender));
        base.OnAfterRender(firstRender);
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        Log(nameof(OnAfterRenderAsync));
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override bool ShouldRender()
    {
        Log(nameof(ShouldRender));
        return base.ShouldRender();
    }

    public void Dispose()
    {
        Log(nameof(Dispose));
    }

    ~Scope()
    {
        Log("~" + nameof(Scope));
    }
}
